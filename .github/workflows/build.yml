#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/dl

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress openwrt/dl 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "ðŸ”— [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#
# Copyright (c) 2019-2021 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# File: .github/workflows/update-checker.yml
# Description: Source code update checker
#

name: Update Checker

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master

on:
  workflow_dispatch:
#  schedule:
#    - cron: 0 */18 * * *

jobs:
  check:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"

    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

    - name: Trigger build
      if: steps.cacheHash.outputs.cache-hit != 'true'
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        event-type: Source Code Update

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1

#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  watch:
    types: started
jobs:
  prepare_release:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - name: Get release tag
      id: release_tag
      run: |
        release_tag="FriendlyWrt-$(date +%Y-%m-%d)"
        echo "##[set-output name=release_tag;]$release_tag"

    - name: Create empty release
      id: release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_tag.outputs.release_tag }}
        draft: false


  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh




        prerelease: false
    outputs:
      release_tag: ${{ steps.release_tag.outputs.release_tag }}
      upload_url: ${{ steps.release.outputs.upload_url }}

  build_friendlywrt:
    needs: prepare_release
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    strategy:
      matrix:
        VERSION: [21.02, 22.03]
        SET: [docker, non-docker]

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        wget https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh
        sed -i -e 's/^apt-get -y install openjdk-8-jdk/# apt-get -y install openjdk-8-jdk/g' install.sh
        sed -i -e 's/^\[ -d fa-toolchain \]/# [ -d fa-toolchain ]/g' install.sh
        sed -i -e 's/^cat fa-toolchain/# cat fa-toolchain/g' install.sh
        sed -i -e 's/^tar xf fa-toolchain/# tar xf fa-toolchain/g' install.sh
        sudo -E bash ./install.sh
        sudo -E update-alternatives --install $(which python) python /usr/bin/python2.7 20
        sudo -E git config --global user.name 'GitHub Actions'
        sudo -E git config --global user.email 'noreply@github.com'
        git clone https://github.com/friendlyarm/repo
        sudo -E cp repo/repo /usr/bin/
        mkdir -p ./artifact
        sudo swapoff -a
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /usr/local/share/boost /opt/ghc
        echo "cores: $(nproc)"

    - name: Download source
      run: |
        mkdir project
        cd project
	
	repo init -u https://github.com/friendlyarm/friendlywrt_manifests -b master-v19.07.1 \
       		 -m h3.xml --repo-url=https://github.com/friendlyarm/repo  --no-clone-bundle
      #  repo sync -c  --no-clone-bundle


      #  repo init --depth=1 -u https://github.com/friendlyarm/friendlywrt_manifests -b master-v${{ matrix.VERSION }} \
      #          -m rk3399.xml --repo-url=https://github.com/friendlyarm/repo  --no-clone-bundle

        repo sync -c friendlywrt --no-clone-bundle
        repo sync -c configs --no-clone-bundle
        repo sync -c device/common --no-clone-bundle
        repo sync -c device/friendlyelec --no-clone-bundle
        repo sync -c scripts --no-clone-bundle
        repo sync -c scripts/sd-fuse  --no-clone-bundle
        repo sync -c toolchain  --no-clone-bundle

    - name: Apply customizations
      run: |
        cd project
        source ../scripts/add_packages.sh
        source ../scripts/custome_config.sh
    - name: Prepare dot config and feeds
      run: |
              cd project
   - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}




    #    [ "${{ matrix.SET }}" == "docker" ] && SUFFIX="-docker"
    #    DIRNAME=friendlywrt$(echo ${{ matrix.VERSION }}|awk -F . '{print $1}')${SUFFIX}
    #    CONFIG=rockchip${SUFFIX}
    #    cat > .current_config.mk <<EOL
    #    . device/friendlyelec/rk3399/base.mk
    #    TARGET_IMAGE_DIRNAME=${DIRNAME}
    #    TARGET_FRIENDLYWRT_CONFIG=${CONFIG}
    #    EOL
    #   DEBUG_DOT_CONFIG=1 ./build.sh friendlywrt
	DEBUG_DOT_CONFIG=1 ./build.sh nanopi_m1_plus.mk
    - name: Download package
      run: |
        cd project/friendlywrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile friendlyWrt
      id: compile
      continue-on-error: true
      run: |
        cd project/friendlywrt
        make -j$(nproc) || make -j1 V=s
        echo $?

    - name: Check the result and try again
      if: steps.compile.outcome == 'failure'
      run: |
        cd project/friendlywrt
        make -j1 V=s



- name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/dl

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}





    - name: Create rootfs package
      id: create_rootfs_package
      run: |
        cd project
        source .current_config.mk
        [ "${{ matrix.SET }}" == "docker" ] && SUFFIX="-docker"
        rootfs_filename="rootfs-friendlywrt-${{ matrix.VERSION }}${SUFFIX}.tgz"
        tar cvzf ../artifact/${rootfs_filename} ${FRIENDLYWRT_SRC}/${FRIENDLYWRT_ROOTFS} \
              ${FRIENDLYWRT_SRC}/${FRIENDLYWRT_PACKAGE_DIR}
        echo "##[set-output name=rootfs_filename;]$rootfs_filename"

    - name: Upload rootfs package
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifact/${{ steps.create_rootfs_package.outputs.rootfs_filename }}
        asset_name: ${{ steps.create_rootfs_package.outputs.rootfs_filename }}
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        overwrite: true

  build_img:
    needs: [prepare_release,build_friendlywrt]
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    strategy:
      matrix:
        VERSION: [21.02, 22.03]
        CPU: [rk3328, rk3399, rk3568, rk3588]
        SET: [docker, non-docker]
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        wget https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh
        sed -i -e 's/^apt-get -y install openjdk-8-jdk/# apt-get -y install openjdk-8-jdk/g' install.sh
        sed -i -e 's/^\[ -d fa-toolchain \]/# [ -d fa-toolchain ]/g' install.sh
        sed -i -e 's/^cat fa-toolchain/# cat fa-toolchain/g' install.sh
        sed -i -e 's/^tar xf fa-toolchain/# tar xf fa-toolchain/g' install.sh
        sudo -E bash ./install.sh
        sudo -E update-alternatives --install $(which python) python /usr/bin/python2.7 20
        sudo -E git config --global user.name 'GitHub Actions'
        sudo -E git config --global user.email 'noreply@github.com'
        git clone https://github.com/friendlyarm/repo
        sudo -E cp repo/repo /usr/bin/
        mkdir -p ./artifact
        sudo swapoff -a
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /usr/local/share/boost /opt/ghc
        echo "cores: $(nproc)"

  #  - name: Download source
   #   run: |
   #     mkdir project
   #     cd project
  #      repo init --depth=1 -u https://github.com/friendlyarm/friendlywrt_manifests -b master-v${{ matrix.VERSION }} \
   #             -m ${{ matrix.CPU }}.xml --repo-url=https://github.com/friendlyarm/repo  --no-clone-bundle
#
   #     repo sync -c kernel --no-clone-bundle
    #    repo sync -c u-boot --no-clone-bundle
   #     repo sync -c rkbin --no-clone-bundle
    #    repo sync -c configs --no-clone-bundle
   #     repo sync -c device/common --no-clone-bundle
    #    repo sync -c device/friendlyelec --no-clone-bundle
    #    repo sync -c scripts --no-clone-bundle
    #    repo sync -c scripts/sd-fuse  --no-clone-bundle
    #    repo sync -c toolchain  --no-clone-bundle

  #  - name: Download friendlywrt rootfs (non-docker)
  #    if: matrix.SET == 'non-docker'
  #    uses: robinraju/release-downloader@v1.6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
    #    repository: ${{ github.repository }}
     #   tag: ${{ needs.prepare_release.outputs.release_tag }}
     #   fileName: "rootfs-friendlywrt-${{ matrix.VERSION }}.tgz"

  #  - name: Download friendlywrt rootfs (docker)
  #    if: matrix.SET == 'docker'
  #    uses: robinraju/release-downloader@v1.6
  ##    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #    with:
  #      repository: ${{ github.repository }}
  #      tag: ${{ needs.prepare_release.outputs.release_tag }}
  #      fileName: "rootfs-friendlywrt-${{ matrix.VERSION }}-docker.tgz"

   # - name: Prepare config
   #   id: config
    #  run: |
    #    cd project
    #    case ${{ matrix.CPU }} in
    #    rk3328)
      #    MODEL=R2S-R2C-Series
     #     ;;
     #   rk3399)
    #      MODEL=R4S-Series
    #      ;;
     #   rk3568)
    #      MODEL=R5S-R5C-Series
    #      ;;
    #    rk3588)
   #       MODEL=R6S
    #      ;;
     #   *)
     #     echo "unknow cpu"
     #     exit 1
     #     ;;
     #   esac
     #   [ "${{ matrix.SET }}" == "docker" ] && SUFFIX="-docker"
      #  FILENAME=${MODEL}-FriendlyWrt-${{ matrix.VERSION }}${SUFFIX}.img
      #  DIRNAME=friendlywrt$(echo ${{ matrix.VERSION }}|awk -F . '{print $1}')${SUFFIX}
   #     CONFIG=rockchip${SUFFIX}
    #    cat > .current_config.mk <<EOL
    #    . device/friendlyelec/${{ matrix.CPU }}/base.mk
    #    TARGET_IMAGE_DIRNAME=${DIRNAME}
    #    TARGET_FRIENDLYWRT_CONFIG=${CONFIG}
   #     TARGET_SD_RAW_FILENAME=${FILENAME}
    #    EOL
   #     echo "##[set-output name=img_filename;]$FILENAME"

  #  - name: Unpack friendlywrt rootfs
  #    run: |
   #     cd project
   #     [ "${{ matrix.SET }}" == "docker" ] && SUFFIX="-docker"
   #     tar xvzf "../rootfs-friendlywrt-${{ matrix.VERSION }}${SUFFIX}.tgz"

    - name: Compile uboot and kernel
      run: |
        cd project
        ./build.sh kernel
        ./build.sh uboot

    - name: Build sd image
      id: build_sd_image
      run: |
        cd project
        ./build.sh sd-img
        mv out/${{ steps.config.outputs.img_filename }} ../artifact/
        cd ../artifact/
        gzip *.img

    - name: Upload image to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifact/${{ steps.config.outputs.img_filename }}.gz
        asset_name: ${{ steps.config.outputs.img_filename }}.gz
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        overwrite: true

